- name: find existing secrets
  set_fact:
    kubeapp_existing_secrets: "{{ query('k8s', kind='Secret', label_selector=kubeapp_prefix_label + '=' + kubeapp_definition.metadata.labels[kubeapp_prefix_label]) }}"

- block:
    - name: find most recent secret
      set_fact:
        kubeapp_most_recent_secret: "{{ kubeapp_existing_secrets|last }}"

    - name: set patch metadata
      set_fact:
        kubeapp_patch_metadata: "{{ kubeapp_definition.metadata|combine({'name': kubeapp_most_recent_secret.metadata.name}) }}"

    - name: set patch test object
      set_fact:
        kubeapp_patch_test: "{{ kubeapp_definition|combine({'metadata': kubeapp_patch_metadata}) }}"

    - name: attempt patching most recent secret
      k8s:
        definition: "{{ kubeapp_patch_test }}"
      check_mode: yes
      register: kubeapp_patch
  when: kubeapp_existing_secrets

- block:
    - debug:
        var: kubeapp_definition
      var:
        git_version: "{{ kubeapp_resource.ansible_facts.kubeapp_git_version }}"

    - name: double check that if secret has changed, then name has changed
      assert:
        msg: "Secret definition differs but secret name remains unchanged - has the secret been committed?"
        that:
          - kubeapp_most_recent_secret.metadata.name != kubeapp_definition.metadata.name
      var:
        git_version: "{{ kubeapp_resource.ansible_facts.kubeapp_git_version }}"

    - name: apply secrets
      k8s:
        definition: "{{ kubeapp_definition }}"
      var:
        git_version: "{{ kubeapp_resource.ansible_facts.kubeapp_git_version }}"
  when: not kubeapp_existing_secrets or kubeapp_patch is changed
