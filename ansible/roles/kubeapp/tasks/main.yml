- name: empty manifest and secret lists (important if role is run twice!)
  set_fact:
    k8s_configmaps: []
    k8s_resources: []

- name: create secrets list
  set_fact:
    kubeapp_git_version: "{{ lookup('pipe', 'git describe --long --first-parent $(git log -n1 --pretty=format:%H ' + item + ')') }}"
  loop: "{{ query('fileglob', 'templates/' + application + '/*-secrets.yml') }}"
  #no_log: yes
  register: kubeapp_git_versions

- name: create secrets list
  set_fact:
    kubeapp_definitions: "{{ lookup('template', item.item, template_vars={'git_version': item.ansible_facts.kubeapp_git_version}).split('---')|map('from_yaml')|list }}"
  loop: "{{ kubeapp_git_versions.results }}"
  #no_log: yes
  register: kubeapp_secrets

- name: create config list
  set_fact:
    k8s_configmaps: >
      {{ k8s_configmaps + [{'definition': lookup('file', item).split('---')|map('from_yaml')|list,
                            'git_version': lookup('pipe', 'git describe --long --first-parent $(git log -n1 --pretty=format:%H ' + item + ')')}] }}
  loop: "{{ query('fileglob', 'templates/' + application + '/*-configmaps.yml')|sort }}"

- name: create manifests list
  set_fact:
    k8s_resources: >
      {{ k8s_resources + [{'definition': lookup('file', item).split('---')|map('from_yaml')|list,
                           'git_version': lookup('pipe', 'git describe --long --first-parent $(git log -n1 --pretty=format:%H ' + item + ')')}] }}
  loop: "{{ query('fileglob', 'templates/' + application + '/*-resources.yml')|sort }}"

- name: apply secrets
  include_tasks: resources.yml
  vars:
    resource_type: Secret
  loop: "{{ kubeapp_secrets.results }}"
  loop_control:
    loop_var: kubeapp_resource

- name: apply config maps
  include_tasks: configmaps.yml
  loop: "{{ k8s_configmaps }}"

- name: apply remaining resources
  include_tasks: resources.yml
  loop: "{{ k8s_resources }}"
