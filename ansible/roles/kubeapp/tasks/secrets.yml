- name: find existing secrets
  set_fact:
    kubeapp_existing_secrets: "{{ lookup('k8s', kind='Secret', label_selector=kubeapp_prefix_label + '=' + item.metadata.labels[kubeapp_prefix_label]) }}"

- block:
    - name: find most recent secret
      set_fact:
        kubeapp_most_recent_secret: "{{ kubeapp_existing_secrets|last }}"

    - name: set patch test object
      set_fact:
        kubeapp_patch_test: {{ item.definition|combine({'metadata': {'name': kubeapp_most_recent_secret.metadata.name }}) }}

    - name: attempt patching most recent secret
      k8s:
        definition: "{{ kubeapp_patch_test }}"
      check_mode: yes
      register: kubeapp_patch
  when: kubeapp_existing_secrets

- name: apply secret
  k8s:
    definition: "{{ item.definition }}"
  var:
    git_version: "{{ item.git_version }}"
  when: not kubeapp_existing_secrets or kubeapp_patch is changed
